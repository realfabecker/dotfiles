commands:
  - name: "key-gen"
    parent: "ssh"
    short: "generates a new ssh key"
    flags:
      - name: "key"
        short: "k"
        required: true
      - name: "comment"
        short: "c"
        required: true
    cmd: |
      key="$HOME/.ssh/{{ .GetFlag "key" }}.id_rsa"
      if [[ -f $key ]]; then
        echo "key $key already exists"
        exit 1
      fi;

      ssh-keygen -t rsa \
        -q \
        -f "$key" \
        -C {{ .GetFlag "comment"}} \
        -N ""

      ssh-add $key && cat "${key}.pub"

  - name: "ssm"
    parent: "aws"
    short: "connect into a aws instance through ssm"
    flags:
      - name: "tag"
        short: "t"
        required: true
      - name: "port"
        short: "p"      
    cmd: |
      id=$(aws ec2 describe-instances --filter 'Name=tag:Name,Values={{ .GetFlag "tag" }}' \
        --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
        --output text \
        --profile magazord-ps-maintain \
        --region sa-east-1)

      if [[ -z $id ]]; then
        echo "unrecongized instance tag {{ .GetFlag "tag" }}"
        exit 1
      fi;

      if [[ ! -z '{{ .GetFlag "port" }}' ]]; then
        aws ssm start-session \
          --target $id \
          --document-name AWS-StartPortForwardingSession \
          --parameters '{"portNumber":["{{ .GetFlag "port" }}"],"localPortNumber":["{{ .GetFlag "port" }}"]}' \
          --profile magazord-ps-maintain \
          --region sa-east-1
        exit 0
      fi;

      aws ssm --profile magazord-ps-maintain start-session --target $id --region sa-east-1

  - name: "restore"
    parent: "gpg"
    short: "restore key into the gpp key chain"
    flags:
      - name: backup
        short: "p"
        value: "./gpg-backup"
        usage: "path to the gpg backup directory"
    cmd: |
      echo "Restoring keychain from ./gpg-backup"
      gpg --import {{ .GetFlag "backup" }}/public.gpg
      gpg --import {{ .GetFlag "backup" }}/private.gpg
      gpg --import-ownertrust ./gpg-backup/trust.gpg
    shell: "/bin/bash"

  - name: "create"
    parent: "gpg"
    short: "create a new gpg key"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
       echo 'Generating a new gpg key for {{ .GetArg "kid" }}'
       config="Key-Type: 1\n"
       config+="Key-Length: 2048\n"
       config+="Subkey-Type: 1\n"
       config+="Subkey-Length: 2048\n"
       config+="Name-Real: $(echo {{ .GetArg "kid" }} | sed -E 's/(.*)@.*/\1/g')\n"
       config+="Name-Email: {{ .GetArg "kid" }}\n"
       config+="Expire-Date: $(date --iso-8601=s -d '+5weeks' | tr -d ':-' | cut -c 1-15)"
       echo -e "$config" > /tmp/gpg-key.conf
       gpg --batch --gen-key /tmp/gpg-key.conf
      
  - name: "export"
    parent: "gpg"
    short: "export gpg public key"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
      gpg --armor --export "$(gpg --list-keys --with-colons {{ .GetArg "kid" }} | awk -F: '/^pub:/ {print $5}')"
      
  - name: "renew"
    parent: "gpg"
    short: "renew gpg keys"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
      echo "Renewing key chain for next \5w (pk)"
      gpg --quick-set-expire "$(gpg --list-secret-keys --with-colons "{{ .GetArg "kid" }}" | awk -F: '/^fpr/ {print $10}' | awk 'NR==1{print $1}')" 5w
      
      echo "Renewing key chain for next \5w (sk)"
      gpg --quick-set-expire "$(gpg --list-secret-keys --with-colons "{{ .GetArg "kid" }}" | awk -F: '/^fpr/ {print $10}' | awk 'NR==1{print $1}')" 5w '*'
      
  - name: "backup"
    parent: "gpg"
    short: "backup a gpg key"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
      storage={{ .GetArg "kid" }}-$(date +%Y%m%d)

      echo "Backing up keychain"
      mkdir -p "./${storage}"
      gpg --export --export-options backup --output "./${storage}/public.gpg" "{{ .GetArg "kid" }}"
      gpg --export-secret-keys --export-options backup --output "./${storage}/private.gpg" "{{ .GetArg "kid" }}"
      gpg --export-ownertrust > "./${storage}/trust.gpg"

      tar -cvf "${storage}.tar" ."/${storage}"
      echo "Backup files created at ./${storage}"
      
  - name: "date"
    parent: "gpg"
    short: "show gpg expiration date"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
      expire_at=$(gpg --list-keys  --with-colons "{{ .GetArg "kid" }}" | awk -F: '/^pub/ {print $7}' | xargs -i{} date -d @{} +%Y-%m-%d)
      echo "{{ .GetArg "kid" }} (Expires At: ${expire_at})"
      
  - name: "git"
    parent: "gpg"
    short: "configure git with gpg signing"
    args:
      - name: kid        
        usage: "identifier for the gpg key"
        required: true
    cmd: |
      fgp=$(gpg --list-keys --with-colons "{{ .GetArg "kid" }}" | awk -F: '/^pub:/ {print $5}')
      if [[ -z $fgp ]]; then
        echo "Unable to load fingerprint for key {{ .GetArg "kid" }}"
        exit 1
      fi;
      
      echo "Setting git gpg configuration"
      git config user.email "{{ .GetArg "kid" }}"
      git config user.name "$(echo "{{ .GetArg "kid" }}" | sed -E 's/(.*)@.*/\1/g')"
      git config user.signingkey "$fgp"
      git config gpg.format openpgp
      git config commit.gpgsign true
      git config tag.gpgsign true
