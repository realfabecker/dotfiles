commands:
  - name: "cmd"
    short: "connect into a aws container instance through cmd"
    flags:
      - name: "cluster"
        short: "c"
        required: true
      - name: "profile"
        short: "x"
        required: true
    args:
      - name: "task"
        usage: "task name"
        required: true
    cmd: |      
      task_id=$(aws --profile {{ .GetFlag "profile" }} ecs list-tasks \
        --cluster {{ .GetFlag "cluster" }} \
        --service-name {{ .GetArg "task" }} \
        --query 'taskArns[0]' \
        --output text | awk -F/ '{print $NF}')

      if [[ -z $task_id ]]; then
        echo "unrecongized task name {{ .GetArg "task" }}"
        exit 1
      fi;

      aws --profile {{ .GetFlag "profile" }} ecs execute-command \
        --cluster {{ .GetFlag "cluster" }} \
        --task $task_id \
        --container {{ .GetArg "task" }} \
        --interactive \
        --command "/bin/sh"

  - name: "ssm"
    short: "connect into a aws instance through ssm"
    flags:
      - name: "tag"
        short: "t"
        required: true
      - name: "port"
        required: true
      - name: "profile"
        short: "x"
        required: true
    cmd: |
      id=$(aws ec2 describe-instances --filter 'Name=tag:Name,Values={{ .GetFlag "tag" }}' \
        --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
        --output text \
        --profile {{ .GetFlag "profile" }} \
        --region sa-east-1)

      if [[ -z $id ]]; then
        echo "unrecongized instance tag {{ .GetFlag "tag" }}"
        exit 1
      fi;

      if [[ ! -z '{{ .GetFlag "port" }}' ]]; then
        aws ssm start-session \
          --target $id \
          --document-name AWS-StartPortForwardingSession \
          --parameters '{"portNumber":["{{ .GetFlag "port" }}"],"localPortNumber":["{{ .GetFlag "port" }}"]}' \
          --profile {{ .GetFlag "profile" }} \
          --region sa-east-1
        exit 0
      fi;

      aws ssm --profile {{ .GetFlag "profile" }} start-session --target $id --region sa-east-1


  - name: "dynamodb"
    short: "dynamodb tooling"
    commands:      
      - name: "dump"
        short: "descreve tabela no dynamodb"
        args:
          - name: table
            required: true
          - name: "profile"
            short: "x"
            required: true
        cmd: |
          aws --profile {{ .GetFlag "profile" }} dynamodb describe-table --table-name {{ .GetArg "table" }} | jq '.Table | pick( .AttributeDefinitions,.TableName, .KeySchema, .ProvisionedThroughput, .GlobalSecondaryIndexes) | del( .ProvisionedThroughput.NumberOfDecreasesToday, .GlobalSecondaryIndexes[].IndexStatus, .GlobalSecondaryIndexes[].ProvisionedThroughput.NumberOfDecreasesToday, .GlobalSecondaryIndexes[].WarmThroughput, .GlobalSecondaryIndexes[].IndexSizeBytes, .GlobalSecondaryIndexes[].ItemCount, .GlobalSecondaryIndexes[].IndexArn) | .GlobalSecondaryIndexes[].ProvisionedThroughput.ReadCapacityUnits=1 | .GlobalSecondaryIndexes[].ProvisionedThroughput.WriteCapacityUnits=1 | .ProvisionedThroughput.WriteCapacityUnits=1 | .ProvisionedThroughput.ReadCapacityUnits=1'

      - name: "list-tables"
        short: "list tabelas no dynamodb"
        cmd: |
          aws --profile {{ .GetFlag "profile" }} dynamodb list-tables

      - name: "create-table"
        short: "cria tabela no dynamodb"
        args:
          - name: file
            required: false
            default: "./backup.json"
        cmd: |
          aws --profile {{ .GetFlag "profile" }} dynamodb create-table --cli-input-json file://{{ .GetArg "file"}}
